<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_exit</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = global.DebugDepth
if(is_undefined(global.teleport_goingTo)){
    exit
}

if(global.teleport_goingTo == object_index){
    global.teleport_movingObject.phy_position_x = phy_position_x
    global.teleport_movingObject.phy_position_y = phy_position_y
    
    global.teleport_movingObject.dir = global.teleport_direction
    
    global.teleport_movingObject.sprite_index = global.teleport_movingObject.sprites[global.teleport_direction]
    global.teleport_movingObject.dir = global.teleport_direction
     global.teleport_movingObject.phy_fixed_rotation = true
    //if a follower exists, place it behind the controllable
    if(global.teleport_movingObject.follower != noone){
        yOfset = 0;
        xOfset = 0;
        gridSize = global.gridSize
        follower = global.teleport_movingObject.follower
        switch(global.teleport_direction){
            case 0:
                xOfset = gridSize;
                break;
            case 1:
                xOfset = -gridSize;
                break;
            case 3:
                yOfset = gridSize;
                break;
            case 2:
                yOfset = -gridSize;
                break;
        }
        follower.phy_position_x = phy_position_x + xOfset
        follower.phy_position_y = phy_position_y + yOfset
        follower.phy_fixed_rotation = true
    }
}



    
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>-1</PhysicsObject>
  <PhysicsObjectSensor>-1</PhysicsObjectSensor>
  <PhysicsObjectShape>1</PhysicsObjectShape>
  <PhysicsObjectDensity>0</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints>
    <point>2,2</point>
    <point>30,2</point>
    <point>30,30</point>
    <point>2,30</point>
  </PhysicsShapePoints>
</object>
